from oram import OptimalORAM
n = 4  # modify for set size

# securely extract a value from an array
def extract_from_arr(i,arr):
    oram_arr = OptimalORAM(n)
    @for_range(n)
    def _(j):
        oram_arr[j]=arr[j]
    output = oram_arr[i]
    return output

# securely extract a row/column from a matrix
def extract_from_mat(axis,i,mat):
    oram_mat = OptimalORAM(n**2)
    @for_range(n)
    def _(j):
        @for_range(n)
        def _(k):
            oram_mat[(j*n)+k]=mat[j][k]

    output = sint.Array(n)
    @for_range(n)
    def _(k):
        if axis == 0:
            output[k]=oram_mat[(i*n)+k]
        else:
            output[k]=oram_mat[(k*n)+i]
    return output

MATCHING = 0
PREFERENCE = 1

print_ln('There are %s suitors', n)

pref_suitors = MultiArray([n, n], sint)
pref_reviewers = MultiArray([n, n], sint)

reviewer_matching = MultiArray([n, 2], sint)
suitor_matching = sint.Array(n)
suitor_preference = sint.Array(n)
unmatched_suitors = sint.Array(n)
matched_reviewers = sint.Array(n)

reviewer_matching.assign_all(sint(-1))
suitor_matching.assign_all(sint(-1))
suitor_preference.assign_all(sint(-1))
unmatched_suitors.assign_all(sint(1))  # all suitors are unmatched
matched_reviewers.assign_all(sint(0))

################### read input #######################
@for_range(n)
def _(i):
	pref_suitors[i] = sint.get_input_from(0, size = n)
	
@for_range(n)
def _(i):
	pref_reviewers[i] = sint.get_input_from(1, size = n)
################### read input #######################

new_reviewer_match = sint.Array(2)
new_reviewer_match.assign_all(sint(-1))


@while_do(lambda x: x < n**2, regint(0))  # should be while true
def _(i):

    ######### check for unmatched suitors  ##########
    v,m = sint(0),sint(-1)
    for p in range(n):
        v = (1-v)*unmatched_suitors[p]
        m = v*(p-m)+m
    
    @if_((m == -1).reveal())
    def _():
        #print_ln('m -- %s', m.reveal())
        break_loop()
    ######### check for unmatched suitors  ##########

    ############   secure extraction  ###########
    suit_pref = extract_from_arr(m,suitor_preference)
    suitor_pref = extract_from_mat(0,m,pref_suitors)
    reviewer_pref = extract_from_mat(1,m,pref_reviewers)

    ############   secure extraction  ###########

    # exactly same as in the paper
    unmatched_suitor = sint(-1)
    rematched_reviewer = sint(-1)
    unmatched = sint(1)
    
    for k in range(n):
        condition = ( suit_pref < suitor_pref[k] ) * ( reviewer_matching[k][PREFERENCE] < reviewer_pref[k] ) #* unmatched  
        unmatched_suitor = (condition == 1).if_else(reviewer_matching[k][MATCHING], unmatched_suitor)
        rematched_reviewer = (condition == 1).if_else(sint(k), rematched_reviewer)
        suit_pref = (condition == 1).if_else(suitor_pref[k], suit_pref)
        new_reviewer_match[MATCHING] = (condition == 1).if_else(m, new_reviewer_match[MATCHING])
        new_reviewer_match[PREFERENCE] = (condition == 1).if_else(reviewer_pref[k], new_reviewer_match[PREFERENCE])

    for z in range(n):
        condition = (z == unmatched_suitor)
        unmatched_suitors[z] = (condition == 1).if_else(sint(1), unmatched_suitors[z])
        suitor_matching[z] = (condition == 1).if_else(sint(-1), suitor_matching[z])
        suitor_preference[z] = (condition == 1).if_else(sint(-1), suitor_preference[z])

        condition = (z == m)
        unmatched_suitors[z] = (condition == 1).if_else(sint(0), unmatched_suitors[z])
        suitor_matching[z] = (condition == 1).if_else(rematched_reviewer, suitor_matching[z])
        suitor_preference[z] = (condition == 1).if_else(suit_pref, suitor_preference[z])

    for z in range(n):
        condition = (z == rematched_reviewer)
        reviewer_matching[z][MATCHING] = (condition == 1).if_else(new_reviewer_match[MATCHING], reviewer_matching[z][MATCHING])
        reviewer_matching[z][PREFERENCE] = (condition == 1).if_else(new_reviewer_match[PREFERENCE], reviewer_matching[z][PREFERENCE])
    
    print_ln('iteration %s done', i+1)
    return i+1

# reveal matches
print_ln('Suitor Matching')
@for_range(n)
def _(i):
	print_ln('%s %s', suitor_matching[i].reveal(), suitor_preference[i].reveal())

print_ln('Reviewer Matching')
@for_range(n)
def _(i):
	print_ln('%s %s', reviewer_matching[i][0].reveal(), reviewer_matching[i][1].reveal())

